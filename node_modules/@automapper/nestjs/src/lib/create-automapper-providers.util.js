"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAutomapperProviders = void 0;
const core_1 = require("@automapper/core");
const di_1 = require("./di");
function createAutomapperProviders(forRootOptions, logger) {
    const { options, globalErrorHandler, globalNamingConventions, singular = false, } = forRootOptions;
    if (singular) {
        if (options.length > 1) {
            const error = 'singular cannot be set to true when you have more than one plugin';
            logger.error(error);
            throw new Error(error);
        }
        const [{ name, namingConventions, errorHandler, pluginInitializer }] = options;
        const mapper = core_1.createMapper({
            name,
            pluginInitializer,
            errorHandler: errorHandler ||
                globalErrorHandler || { handle: logger.error.bind(logger) },
            namingConventions: namingConventions || globalNamingConventions,
        });
        return [
            {
                provide: di_1.getMapperToken(),
                useValue: mapper,
            },
        ];
    }
    return options.map(({ name, errorHandler, namingConventions, pluginInitializer }) => {
        const mapper = core_1.createMapper({
            name,
            pluginInitializer,
            errorHandler: errorHandler ||
                globalErrorHandler || { handle: logger.error.bind(logger) },
            namingConventions: namingConventions || globalNamingConventions,
        });
        return {
            provide: di_1.getMapperToken(mapper.name),
            useValue: mapper,
        };
    });
}
exports.createAutomapperProviders = createAutomapperProviders;
//# sourceMappingURL=create-automapper-providers.util.js.map